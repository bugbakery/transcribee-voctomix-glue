# generated by datamodel-codegen:
#   filename:  transcribee-openapi.yaml
#   timestamp: 2024-11-09T13:54:27+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import BaseModel, Field, constr


class TaskType(Enum):
    ALIGN = 'ALIGN'


class AlignTask(BaseModel):
    document_id: UUID = Field(..., title='Document Id')
    task_parameters: Dict[str, Any] = Field(..., title='Task Parameters')
    task_type: Optional[TaskType] = Field('ALIGN', title='Task Type')


class BodyAddMediaFileApiV1DocumentsDocumentIdAddMediaFilePost(BaseModel):
    file: bytes = Field(..., title='File')
    tags: List[str] = Field(..., title='Tags')


class BodyCreateDocumentApiV1DocumentsPost(BaseModel):
    file: bytes = Field(..., title='File')
    language: str = Field(..., title='Language')
    model: str = Field(..., title='Model')
    name: str = Field(..., title='Name')
    number_of_speakers: Optional[int] = Field(None, title='Number Of Speakers')


class BodyImportDocumentApiV1DocumentsImportPost(BaseModel):
    media_file: bytes = Field(..., title='Media File')
    name: str = Field(..., title='Name')


class ChangePasswordRequest(BaseModel):
    new_password: constr(min_length=6) = Field(..., title='New Password')
    old_password: str = Field(..., title='Old Password')


class CreateShareToken(BaseModel):
    can_write: bool = Field(..., title='Can Write')
    name: str = Field(..., title='Name')
    valid_until: Optional[datetime] = Field(None, title='Valid Until')


class CreateUser(BaseModel):
    password: str = Field(..., title='Password')
    username: str = Field(..., title='Username')


class CreateWorker(BaseModel):
    name: str = Field(..., title='Name')


class DeactivateWorker(BaseModel):
    id: UUID = Field(..., title='Id')


class DocumentMedia(BaseModel):
    content_type: str = Field(..., title='Content Type')
    tags: List[str] = Field(..., title='Tags')
    url: str = Field(..., title='Url')


class DocumentShareTokenBase(BaseModel):
    can_write: bool = Field(..., title='Can Write')
    document_id: UUID = Field(..., title='Document Id')
    id: UUID = Field(..., title='Id')
    name: str = Field(..., title='Name')
    token: str = Field(..., title='Token')
    valid_until: Optional[datetime] = Field(None, title='Valid Until')


class DocumentUpdateRequest(BaseModel):
    name: Optional[str] = Field(None, title='Name')


class DocumentWithAccessInfo(BaseModel):
    can_write: bool = Field(..., title='Can Write')
    changed_at: str = Field(..., title='Changed At')
    created_at: str = Field(..., title='Created At')
    has_full_access: bool = Field(..., title='Has Full Access')
    id: str = Field(..., title='Id')
    media_files: List[DocumentMedia] = Field(..., title='Media Files')
    name: str = Field(..., title='Name')


class ExportError(BaseModel):
    error: str = Field(..., title='Error')


class ExportFormat(Enum):
    VTT = 'VTT'
    SRT = 'SRT'


class ExportResult(BaseModel):
    result: str = Field(..., title='Result')


class TaskType1(Enum):
    EXPORT = 'EXPORT'


class ExportTaskParameters(BaseModel):
    format: ExportFormat
    include_speaker_names: bool = Field(..., title='Include Speaker Names')
    include_word_timing: bool = Field(..., title='Include Word Timing')
    max_line_length: Optional[int] = Field(None, title='Max Line Length')


class KeepaliveBody(BaseModel):
    progress: Optional[float] = Field(None, title='Progress')


class LoginResponse(BaseModel):
    token: str = Field(..., title='Token')


class ModelConfig(BaseModel):
    id: str = Field(..., title='Id')
    languages: List[str] = Field(..., title='Languages')
    name: str = Field(..., title='Name')


class PageConfig(BaseModel):
    footer_position: Optional[int] = Field(None, title='Footer Position')
    name: str = Field(..., title='Name')
    text: str = Field(..., title='Text')


class PublicConfig(BaseModel):
    logged_out_redirect_url: Optional[str] = Field(
        None, title='Logged Out Redirect Url'
    )
    models: Dict[str, ModelConfig] = Field(..., title='Models')


class SetDurationRequest(BaseModel):
    duration: float = Field(..., title='Duration')


class ShortPageConfig(BaseModel):
    footer_position: Optional[int] = Field(None, title='Footer Position')
    name: str = Field(..., title='Name')


class TaskType2(Enum):
    IDENTIFY_SPEAKERS = 'IDENTIFY_SPEAKERS'


class SpeakerIdentificationTask(BaseModel):
    document_id: UUID = Field(..., title='Document Id')
    task_parameters: Dict[str, Any] = Field(..., title='Task Parameters')
    task_type: Optional[TaskType2] = Field('IDENTIFY_SPEAKERS', title='Task Type')


class TaskAttemptResponse(BaseModel):
    progress: Optional[float] = Field(None, title='Progress')


class TaskState(Enum):
    NEW = 'NEW'
    ASSIGNED = 'ASSIGNED'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'


class TaskTypeModel(Enum):
    IDENTIFY_SPEAKERS = 'IDENTIFY_SPEAKERS'
    TRANSCRIBE = 'TRANSCRIBE'
    ALIGN = 'ALIGN'
    REENCODE = 'REENCODE'
    EXPORT = 'EXPORT'


class TaskType3(Enum):
    TRANSCRIBE = 'TRANSCRIBE'


class TranscribeTaskParameters(BaseModel):
    lang: str = Field(..., title='Lang')
    model: str = Field(..., title='Model')


class UnknownTask(BaseModel):
    document_id: UUID = Field(..., title='Document Id')
    task_parameters: Dict[str, Any] = Field(..., title='Task Parameters')
    task_type: str = Field(..., title='Task Type')


class UserBase(BaseModel):
    username: str = Field(..., title='Username')


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class Worker(BaseModel):
    deactivated_at: Optional[datetime] = Field(None, title='Deactivated At')
    id: Optional[UUID] = Field(None, title='Id')
    last_seen: Optional[datetime] = Field(None, title='Last Seen')
    name: str = Field(..., title='Name')
    token: str = Field(..., title='Token')


class WorkerWithId(BaseModel):
    deactivated_at: Optional[datetime] = Field(None, title='Deactivated At')
    id: Optional[UUID] = Field(None, title='Id')
    last_seen: Optional[datetime] = Field(None, title='Last Seen')
    name: str = Field(..., title='Name')


class Document(BaseModel):
    changed_at: str = Field(..., title='Changed At')
    created_at: str = Field(..., title='Created At')
    id: str = Field(..., title='Id')
    media_files: List[DocumentMedia] = Field(..., title='Media Files')
    name: str = Field(..., title='Name')


class ExportTask(BaseModel):
    document_id: UUID = Field(..., title='Document Id')
    task_parameters: ExportTaskParameters
    task_type: Optional[TaskType1] = Field('EXPORT', title='Task Type')


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')


class TaskQueueInfoTaskEntry(BaseModel):
    id: UUID = Field(..., title='Id')
    remaining_cost: float = Field(..., title='Remaining Cost')
    state: TaskState
    task_type: TaskTypeModel


class TaskResponse(BaseModel):
    current_attempt: Optional[TaskAttemptResponse] = None
    dependencies: List[UUID] = Field(..., title='Dependencies')
    document_id: UUID = Field(..., title='Document Id')
    id: UUID = Field(..., title='Id')
    state: TaskState
    task_parameters: Dict[str, Any] = Field(..., title='Task Parameters')
    task_type: TaskTypeModel


class TranscribeTask(BaseModel):
    document_id: UUID = Field(..., title='Document Id')
    task_parameters: TranscribeTaskParameters
    task_type: Optional[TaskType3] = Field('TRANSCRIBE', title='Task Type')


class ApiDocumentWithTasks(BaseModel):
    changed_at: str = Field(..., title='Changed At')
    created_at: str = Field(..., title='Created At')
    id: str = Field(..., title='Id')
    media_files: List[DocumentMedia] = Field(..., title='Media Files')
    name: str = Field(..., title='Name')
    tasks: List[TaskResponse] = Field(..., title='Tasks')


class AssignedTaskResponse(BaseModel):
    current_attempt: Optional[TaskAttemptResponse] = None
    dependencies: List[UUID] = Field(..., title='Dependencies')
    document: Document
    document_id: UUID = Field(..., title='Document Id')
    id: UUID = Field(..., title='Id')
    state: TaskState
    task_parameters: Dict[str, Any] = Field(..., title='Task Parameters')
    task_type: TaskTypeModel


class TaskQueueInfoResponse(BaseModel):
    open_tasks: List[TaskQueueInfoTaskEntry] = Field(..., title='Open Tasks')
