# generated by datamodel-codegen:
#   filename:  transcribee-openapi.json
#   timestamp: 2023-12-27T21:12:05+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import BaseModel, Field, constr


class TaskType(Enum):
    ALIGN = "ALIGN"


class AlignTask(BaseModel):
    task_type: Optional[TaskType] = Field("ALIGN", title="Task Type")
    task_parameters: Dict[str, Any] = Field(..., title="Task Parameters")
    document_id: UUID = Field(..., title="Document Id")


class BodyAddMediaFileApiV1DocumentsDocumentIdAddMediaFilePost(BaseModel):
    tags: List[str] = Field(..., title="Tags")
    file: bytes = Field(..., title="File")


class BodyCreateDocumentApiV1DocumentsPost(BaseModel):
    name: str = Field(..., title="Name")
    model: str = Field(..., title="Model")
    language: str = Field(..., title="Language")
    number_of_speakers: Optional[int] = Field(None, title="Number Of Speakers")
    file: bytes = Field(..., title="File")


class BodyImportDocumentApiV1DocumentsImportPost(BaseModel):
    media_file: bytes = Field(..., title="Media File")
    name: str = Field(..., title="Name")


class ChangePasswordRequest(BaseModel):
    old_password: str = Field(..., title="Old Password")
    new_password: constr(min_length=6) = Field(..., title="New Password")


class CreateShareToken(BaseModel):
    name: str = Field(..., title="Name")
    valid_until: Optional[datetime] = Field(None, title="Valid Until")
    can_write: bool = Field(..., title="Can Write")


class CreateUser(BaseModel):
    username: str = Field(..., title="Username")
    password: str = Field(..., title="Password")


class CreateWorker(BaseModel):
    name: str = Field(..., title="Name")


class DeactivateWorker(BaseModel):
    id: UUID = Field(..., title="Id")


class DocumentMedia(BaseModel):
    url: str = Field(..., title="Url")
    content_type: str = Field(..., title="Content Type")
    tags: List[str] = Field(..., title="Tags")


class DocumentShareTokenBase(BaseModel):
    id: UUID = Field(..., title="Id")
    name: str = Field(..., title="Name")
    valid_until: Optional[datetime] = Field(None, title="Valid Until")
    document_id: UUID = Field(..., title="Document Id")
    token: str = Field(..., title="Token")
    can_write: bool = Field(..., title="Can Write")


class DocumentUpdateRequest(BaseModel):
    name: Optional[str] = Field(None, title="Name")


class DocumentWithAccessInfo(BaseModel):
    id: str = Field(..., title="Id")
    name: str = Field(..., title="Name")
    created_at: str = Field(..., title="Created At")
    changed_at: str = Field(..., title="Changed At")
    media_files: List[DocumentMedia] = Field(..., title="Media Files")
    can_write: bool = Field(..., title="Can Write")
    has_full_access: bool = Field(..., title="Has Full Access")


class KeepaliveBody(BaseModel):
    progress: Optional[float] = Field(None, title="Progress")


class LoginResponse(BaseModel):
    token: str = Field(..., title="Token")


class ModelConfig(BaseModel):
    id: str = Field(..., title="Id")
    name: str = Field(..., title="Name")
    languages: List[str] = Field(..., title="Languages")


class PageConfig(BaseModel):
    name: str = Field(..., title="Name")
    footer_position: Optional[int] = Field(None, title="Footer Position")
    text: str = Field(..., title="Text")


class PublicConfig(BaseModel):
    models: Dict[str, ModelConfig] = Field(..., title="Models")
    logged_out_redirect_url: Optional[str] = Field(
        None, title="Logged Out Redirect Url"
    )


class SetDurationRequest(BaseModel):
    duration: float = Field(..., title="Duration")


class ShortPageConfig(BaseModel):
    name: str = Field(..., title="Name")
    footer_position: Optional[int] = Field(None, title="Footer Position")


class TaskType1(Enum):
    IDENTIFY_SPEAKERS = "IDENTIFY_SPEAKERS"


class SpeakerIdentificationTask(BaseModel):
    task_type: Optional[TaskType1] = Field("IDENTIFY_SPEAKERS", title="Task Type")
    task_parameters: Dict[str, Any] = Field(..., title="Task Parameters")
    document_id: UUID = Field(..., title="Document Id")


class TaskAttemptResponse(BaseModel):
    progress: Optional[float] = Field(None, title="Progress")


class TaskState(Enum):
    NEW = "NEW"
    ASSIGNED = "ASSIGNED"
    COMPLETED = "COMPLETED"
    FAILED = "FAILED"


class TaskTypeModel(Enum):
    IDENTIFY_SPEAKERS = "IDENTIFY_SPEAKERS"
    TRANSCRIBE = "TRANSCRIBE"
    ALIGN = "ALIGN"
    REENCODE = "REENCODE"


class TaskType2(Enum):
    TRANSCRIBE = "TRANSCRIBE"


class TranscribeTaskParameters(BaseModel):
    lang: str = Field(..., title="Lang")
    model: str = Field(..., title="Model")


class UnknownTask(BaseModel):
    task_type: str = Field(..., title="Task Type")
    task_parameters: Dict[str, Any] = Field(..., title="Task Parameters")
    document_id: UUID = Field(..., title="Document Id")


class UserBase(BaseModel):
    username: str = Field(..., title="Username")


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title="Location")
    msg: str = Field(..., title="Message")
    type: str = Field(..., title="Error Type")


class Worker(BaseModel):
    name: str = Field(..., title="Name")
    last_seen: Optional[datetime] = Field(None, title="Last Seen")
    deactivated_at: Optional[datetime] = Field(None, title="Deactivated At")
    id: Optional[UUID] = Field(None, title="Id")
    token: str = Field(..., title="Token")


class WorkerWithId(BaseModel):
    name: str = Field(..., title="Name")
    last_seen: Optional[datetime] = Field(None, title="Last Seen")
    deactivated_at: Optional[datetime] = Field(None, title="Deactivated At")
    id: Optional[UUID] = Field(None, title="Id")


class Document(BaseModel):
    id: str = Field(..., title="Id")
    name: str = Field(..., title="Name")
    created_at: str = Field(..., title="Created At")
    changed_at: str = Field(..., title="Changed At")
    media_files: List[DocumentMedia] = Field(..., title="Media Files")


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title="Detail")


class TaskQueueInfoTaskEntry(BaseModel):
    id: UUID = Field(..., title="Id")
    task_type: TaskTypeModel
    state: TaskState
    remaining_cost: float = Field(..., title="Remaining Cost")


class TaskResponse(BaseModel):
    task_type: TaskTypeModel
    task_parameters: Dict[str, Any] = Field(..., title="Task Parameters")
    document_id: UUID = Field(..., title="Document Id")
    id: UUID = Field(..., title="Id")
    state: TaskState
    dependencies: List[UUID] = Field(..., title="Dependencies")
    current_attempt: Optional[TaskAttemptResponse] = None


class TranscribeTask(BaseModel):
    task_type: Optional[TaskType2] = Field("TRANSCRIBE", title="Task Type")
    task_parameters: TranscribeTaskParameters
    document_id: UUID = Field(..., title="Document Id")


class ApiDocumentWithTasks(BaseModel):
    id: str = Field(..., title="Id")
    name: str = Field(..., title="Name")
    created_at: str = Field(..., title="Created At")
    changed_at: str = Field(..., title="Changed At")
    media_files: List[DocumentMedia] = Field(..., title="Media Files")
    tasks: List[TaskResponse] = Field(..., title="Tasks")


class AssignedTaskResponse(BaseModel):
    task_type: TaskTypeModel
    task_parameters: Dict[str, Any] = Field(..., title="Task Parameters")
    document_id: UUID = Field(..., title="Document Id")
    id: UUID = Field(..., title="Id")
    state: TaskState
    dependencies: List[UUID] = Field(..., title="Dependencies")
    current_attempt: Optional[TaskAttemptResponse] = None
    document: Document


class TaskQueueInfoResponse(BaseModel):
    open_tasks: List[TaskQueueInfoTaskEntry] = Field(..., title="Open Tasks")
